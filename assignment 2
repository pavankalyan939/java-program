Write java code for creating 3 methods called even, odd and
prime in parent class and override them from child class. The 
parent class should print 1 to 20 range in all method, but child 
print 1 to 30 array range in all methods. And access all the 
methods using derived class object
8.00 AM to 9.00 AM

class Parent {
    
    public void even() {
        System.out.print("Even numbers (1 to 20): ");
        for (int i = 1; i <= 20; i++) {
            if (i % 2 == 0) {
                System.out.print(i + " ");
            }
        }
        System.out.println();
    }

    public void odd() {
        System.out.print("Odd numbers (1 to 20): ");
        for (int i = 1; i <= 20; i++) {
            if (i % 2 != 0) {
                System.out.print(i + " ");
            }
        }
        System.out.println();
    }

    public void prime() {
        System.out.print("Prime numbers (1 to 20): ");
        for (int i = 1; i <= 20; i++) {
            if (isPrime(i)) {
                System.out.print(i + " ");
            }
        }
        System.out.println();
    }

    private boolean isPrime(int num) {
        if (num <= 1) {
            return false;
        }
        for (int i = 2; i <= Math.sqrt(num); i++) {
            if (num % i == 0) {
                return false;
            }
        }
        return true;
    }
}

class Child extends Parent {
    @Override
    public void even() {
        System.out.print("Even numbers (1 to 30): ");
        for (int i = 1; i <= 30; i++) {
            if (i % 2 == 0) {
                System.out.print(i + " ");
            }
        }
        System.out.println();
    }

    @Override
    public void odd() {
        System.out.print("Odd numbers (1 to 30): ");
        for (int i = 1; i <= 30; i++) {
            if (i % 2 != 0) {
                System.out.print(i + " ");
            }
        }
        System.out.println();
    }

    @Override
    public void prime() {
        System.out.print("Prime numbers (1 to 30): ");
        for (int i = 1; i <= 30; i++) {
            if (isPrime(i)) {
                System.out.print(i + " ");
            }
        }
        System.out.println();
    }

    private boolean isPrime(int num) {
        if (num <= 1) {
            return false;
        }
        for (int i = 2; i <= Math.sqrt(num); i++) {
            if (num % i == 0) {
                return false;
            }
        }
        return true;
    }
}

public class Main {
    public static void main(String[] args) {
        // Creating an object of Child class
        Child child = new Child();

        child.even();
        child.odd();
        child.prime();
    }
}
Override a default constructor, which contains a=10,b=15 in java
using parametrized constructor which contains a=20,b=25. Create 
a method called disp(). And call both the constructors associating 
it with disp()

class Parent {
    int a, b;

    public Parent() {
        a = 10;
        b = 15;
    }

    public Parent(int a, int b) {
        this.a = a;
        this.b = b;
    }
    public void disp() {
        System.out.println("Values of a: " + a + ", b: " + b);
    }
}

class Child extends Parent {
    public Child() {
        super(); 
    }
    public Child(int a, int b) {
        super(a, b); 
    }

    // Overriding disp() method to demonstrate method override
    @Override
    public void disp() {
        super.disp(); // Calls disp() method of Parent
    }
}

public class Main {
    public static void main(String[] args) {
       
        System.out.println("Using default constructor:");
        Child child1 = new Child();
        child1.disp();

        System.out.println("\nUsing parameterized constructor:");
        Child child2 = new Child(20, 25);
        child2.disp();
    }
}
Java program to create a Base class with a method called ‘void
area(int a, int b)’ which print area of a square. Now override the 
method from Derived class and make it print area of a rectangle

class Base {
    public void area(int a, int b) {
        int area = a * a; 
        System.out.println("Area of square with side " + a + " is: " + area);
    }
}

class Derived extends Base {
    @Override
    public void area(int length, int breadth) {
        int area = length * breadth; 
        System.out.println("Area of rectangle with length " + length + " and breadth " + breadth + " is: " + area);
    }
}

public class Main {
    public static void main(String[] args) {
        Base base = new Base();
        Derived derived = new Derived();

        base.area(5, 5); 
        derived.area(6, 4); 
    }
}
Write java code to overload a method called ‘int sum(int a, int b)’
by the 3 ways.
a) By increasing and decreasing no. of parameters
b) By changing the data types of parameters
c) By interchanging the parameters

a)By increasing and decreasing the number of parameters

class OverloadExample {
   
    public int sum(int a, int b) {
        return a + b;
    }

    public int sum(int a, int b, int c) {
        return a + b + c;
    }

    public int sum(int a) {
        return a;
    }
}

public class Main {
    public static void main(String[] args) {
        OverloadExample obj = new OverloadExample();

        // Calling different overloaded versions of sum method
        System.out.println("Sum of 5 and 10 is: " + obj.sum(5, 10));
        System.out.println("Sum of 5, 10, and 15 is: " + obj.sum(5, 10, 15));
        System.out.println("Sum of single number 7 is: " + obj.sum(7));
    }
}
b) By changing the data types of parameters

class OverloadExample {
    public int sum(int a, int b) {
        return a + b;
    }

    public double sum(double a, double b) {
        return a + b;
    }
}

public class Main {
    public static void main(String[] args) {
        OverloadExample obj = new OverloadExample();

       
        System.out.println("Sum of integers 5 and 10 is: " + obj.sum(5, 10));
        System.out.println("Sum of doubles 5.5 and 10.5 is: " + obj.sum(5.5, 10.5));
    }
}
c) By interchanging the parameters

class OverloadExample {
  
    public int sum(int a, int b) {
        return a + b;
    }

    public int sum(int b, int a) {
        return a + b;
    }
}

public class Main {
    public static void main(String[] args) {
        OverloadExample obj = new OverloadExample();

        System.out.println("Sum of 5 and 10 is: " + obj.sum(5, 10));
        System.out.println("Sum of 10 and 5 (interchanged) is: " + obj.sum(10, 5));
    }
}
Create an interface called Tree and extend 2 classes from it called 
Branch1 and Branch2. Tree should contain methods fruits(), 
leaves() and flowers(), these methods contain 2,3,4 parameters respectively
interface Tree {
    void fruits(String fruit1, String fruit2);
    void leaves(String leaf1, String leaf2, String leaf3);
    void flowers(String flower1, String flower2, String flower3, String flower4);
}
class Branch1 implements Tree {
    @Override
    public void fruits(String fruit1, String fruit2) {
        System.out.println("Branch1: Fruits - " + fruit1 + ", " + fruit2);
    }

    @Override
    public void leaves(String leaf1, String leaf2, String leaf3) {
        System.out.println("Branch1: Leaves - " + leaf1 + ", " + leaf2 + ", " + leaf3);
    }

    @Override
    public void flowers(String flower1, String flower2, String flower3, String flower4) {
        System.out.println("Branch1: Flowers - " + flower1 + ", " + flower2 + ", " + flower3 + ", " + flower4);
    }
}

class Branch2 implements Tree {
    @Override
    public void fruits(String fruit1, String fruit2) {
        System.out.println("Branch2: Fruits - " + fruit1 + ", " + fruit2);
    }

    @Override
    public void leaves(String leaf1, String leaf2, String leaf3) {
        System.out.println("Branch2: Leaves - " + leaf1 + ", " + leaf2 + ", " + leaf3);
    }

    @Override
    public void flowers(String flower1, String flower2, String flower3, String flower4) {
        System.out.println("Branch2: Flowers - " + flower1 + ", " + flower2 + ", " + flower3 + ", " + flower4);
    }
}

public class Main {
    public static void main(String[] args) {
        Branch1 branch1 = new Branch1();
        Branch2 branch2 = new Branch2();

        branch1.fruits("Apple", "Orange");
        branch1.leaves("Green", "Yellow", "Red");
        branch1.flowers("Rose", "Jasmine", "Lily", "Tulip");

        System.out.println(); // Adding a blank line for clarity

        branch2.fruits("Mango", "Banana");
        branch2.leaves("Oval", "Round", "Pointed");
        branch2.flowers("Sunflower", "Daisy", "Orchid", "Lotus");
    }
}
